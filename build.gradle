/*
 * Just run this script using "gradlew", and it will show you typical examples of how to use it.
 */
 
defaultTasks 'cgeoHelp'

task cgeoHelp << {
	println ''
	println 'These are some of the available commands for building cgeo.'
	println ''
	println 'cleaning all generated artifacts:'
	println '    gradlew clean'
	println ''
	println 'build:'
	println '    gradlew assembleDebug'
	println ''
	println 'install on connected device/emulator:'
	println '    gradlew installBasicDebug'
	println ''
	println 'run app on connected device/emulator:'
	println '    gradlew runBasicDebug'
	println ''
	println 'instrumentation tests on connected device/emulator:'
	println '    gradlew connectedBasicDebugAndroidTest'
	println ''
	println 'pure unit tests WITHOUT device'
	println '    gradlew testBasicDebugUnitTest'
	println ''
	println 'all unit tests (pure and instrumentation)'
	println '    gradlew testDebug'
	println ''
	println 'check project dependencies for updates:'
	println '    gradlew dependencies main:dependencies'
	println ''
	println 'check gradle dependencies for updates:'
	println '    gradlew dependencyUpdates'
	println ''
	println 'Use "gradlew tasks" for more available tasks.'
	println ''
	println ''
	println 'Available build types are: debug, nightly (requires an env var named NB),' +
			'rc (requires an env var named RC), release.'
}

configure(cgeoHelp) {
    group = 'cgeo'
    description = 'Displays help for building cgeo.'
}


/*
 * update check for all components in this gradle script
 */
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'idea'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
		// these dependencies are used by gradle plugins, not by our projects
		
		// check for updates of gradle plugin dependencies
		classpath 'com.github.ben-manes:gradle-versions-plugin:0.12.0'
	
		// Android gradle plugin
        classpath 'com.android.tools.build:gradle:1.5.0'
    
		// Android annotation processor
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'

		// un-mocking of portable Android classes
		classpath 'de.mobilej.unmock:UnMockPlugin:0.3.6'

		// Google Services (App Invite) has its own Gradle plugin
		classpath 'com.google.gms:google-services:2.0.0-alpha9'
    }
}

// filter out non release version updates and other updates we cannot use
allprojects {
	configurations {
		all {
			resolutionStrategy {
				componentSelection {
					all { ComponentSelection selection ->
						boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
							selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
						}
						if (rejected) {
							selection.reject('Release candidate')
						}

						// https://github.com/joel-costigliola/assertj-core/issues/345
						if (selection.candidate.group == 'org.assertj' && selection.candidate.module == 'assertj-core' && selection.candidate.version.substring(0,1).toInteger() > 1) {
							selection.reject("assertj 2.x or higher require Java 7 SE classes not available in Android")
						}

						// JDT null annotations
						if (selection.candidate.group == 'org.eclipse.jdt' && selection.candidate.module == 'org.eclipse.jdt.annotation' && selection.candidate.version.startsWith('2')) {
							selection.reject("jdt.annotations 2.x require Java 8")
						}
					}
				}
			}
		}
	}
}


/*
 * common configuration for the Java projects
 */

ext.buildToolsVersion = "23.0.2"

subprojects {
    repositories {
        jcenter()
    }

    // disable warning of annotation processor about annotation types with no registered processor (like @NonNull)
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:-processing"
    }

    idea.module {
        downloadJavadoc = true
        downloadSources = true
    }
}

// check existence of private properties, show an error message
task verifyPrivateProperties << {
    if (!rootProject.file('private.properties').exists()) {
        throw new InvalidUserDataException("For signing the release build you must provide a file private.properties in the root directory. Copy templates/private.properties and change the values.")
    }
}

tasks.whenTaskAdded { theTask ->
    // only verify the existence of private.properties, when the file is really needed
    if (theTask.name.equals("packageRelease")) {
        theTask.dependsOn "verifyPrivateProperties"
    }
}
