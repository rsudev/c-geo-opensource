import org.apache.tools.ant.filters.ReplaceTokens

/*
 * Run "gradlew" or "gradlew cgeoHelp" in the parent directory for a help of how to use this build file.
 */

/*
 * Android plugin, http://developer.android.com/tools/building/plugin-for-gradle.html
 */
apply plugin: 'com.android.application'
/*
 * https://github.com/KeepSafe/dexcount-gradle-plugin. dex counting can take several seconds, therefore do this only on the CI server
 */

if (isContinuousIntegrationServer()) {
    apply plugin: 'com.getkeepsafe.dexcount'
}

android {
    compileSdkVersion "Google Inc.:Google APIs:24"

    compileOptions {
        // use the diamond operator and some other goodies in Android
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    defaultConfig {
        // TODO fill this section and remove the values from AndroidManifest only after the full switch to gradle
        // As these values override the manifest, we might otherwise use different values in gradle and non-gradle builds.
        minSdkVersion project.minSdkVersion
        targetSdkVersion 24
        versionName versionNameFromDate()
        versionCode versionCodeFromDate(0)

        // NOTE: must match the package in the test directory and must be different from the app package
        testApplicationId "cgeo.geocaching.test"

        //testHandlingProfiling true
        testFunctionalTest true

        // set the default test runner to be used by IDE and command line
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        // by convention, the folder name "main" is used for the APK file name. we want cgeo instead
        archivesBaseName = "cgeo"

        // this is necessary to move .google_measurement_service into a app-specific namespace (see https://github.com/kotmyrevich/analytics-issues/issues/784)
        applicationId = "cgeo.geocaching"

        // include only those language resources from libraries which we actively maintain ourself in the translation project
        resConfigs "en", "ca", "ceb", "cs", "da", "de", "el", "es", "fi", "fr", "hu", "it", "ja", "ko", "lt", "lv", "nb", "nl", "pl", "pt", "ro", "ru", "sk", "sl", "sv", "tr"
    }

    // signing is handled via private.properties
    signingConfigs {
        release
    }

    buildTypes {
        debug {
            // debug build name contains git commit for better reproduction of bugs
            versionNameSuffix "-" + gitCommitId().substring(0, 7) + " developer build"

            // additional proguard rules just for the test code
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt', '../tests/proguard-project.txt'

            // code coverage
            testCoverageEnabled isContinuousIntegrationServer()
        }
        nightly {
            def nightlyName = System.getenv('NB') // NB, NB1, ...
            versionNameSuffix "-$nightlyName-" + gitCommitId().substring(0, 7)
            signingConfig signingConfigs.release
            // use release version of source code library dependencies
            matchingFallbacks = ['release']
        }
        rc {
            def rcName = System.getenv('RC') // RC, RC1, RC2 ...
            versionNameSuffix "-$rcName"
            signingConfig signingConfigs.release
            // use release version of source code library dependencies
            matchingFallbacks = ['release']
        }
        legacy {
            signingConfig signingConfigs.release
            // use release version of source code library dependencies
            matchingFallbacks = ['release']
        }
        release {
            signingConfig signingConfigs.release
        }
    }

    buildTypes.all { buildType ->
        // enable proguard and remove unused code
        buildType.minifyEnabled true

        // remove unused resources in addition to unused code
        shrinkResources true

        // proguard rules
        buildType.proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
    }

    testBuildType "debug" //the default BuildType

    sourceSets {
        // application sources in source set "main"
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src', 'thirdparty', '../common/src']
            // no need for annotation generated sources
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            aidl.srcDirs = ['src']
            // default src/main/aidl creates package name conflicts in Eclipse
            jni.srcDirs = []
        }
        // local unit tests, which can be executed without a device
        test {
            setRoot("../tests")
            manifest.srcFile '../tests/AndroidManifest.xml'
            java.srcDir '../tests/src'
            resources.srcDirs = ['../tests/src']
            res.srcDirs = ['../tests/res']
        }
        // device/emulator based instrumentation tests in source set "androidTest"
        androidTest {
            // map tests to the Eclipse style test project instead of the default app/src/androidTest/java
            setRoot("../tests")
            manifest.srcFile '../tests/AndroidManifest.xml'
            java {
                srcDir '../tests/src-android'

                // TODO: espresso causes some dependency conflicts, therefore disable espresso tests temporarily
                exclude '**/*EspressoTest.java'
                exclude '**/*LogTrackableActivityTest.java'
                exclude '**/activity/waypoint/*Waypoint*Test.java'
            }
            resources.srcDirs = ['../tests/src']
            res.srcDirs = ['../tests/res']
        }
        // TODO: the package cgeo.geocaching.test.mock is currently duplicated in both "src" and "src-android". if a shared source folder is used instead, then we get java.lang.VerificationExceptions, because the 2 unit test frameworks modify the classes in different ways
    }

    testOptions {
        resultsDir = "$project.buildDir/build/test-results"
    }

    lintOptions {
        // generally we accept lint errors when building
        abortOnError false

        // abort release builds in case of FATAL errors
        checkReleaseBuilds true

        // recommended by ButterKnife, http://jakewharton.github.io/butterknife/
        disable 'InvalidPackage'
    }

    packagingOptions {
        // you can double click an APK file in Android Studio 2.2+ to see what's in there
        // license files of libs are not needed in our APK
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/dependencies'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/notice'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/license'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'COPYING'
        exclude 'COPYING.LESSER'
        exclude '.readme'
        // AndroidAnnotations
        exclude 'androidannotations-api.properties'
        // findbugs
        exclude 'META-INF/maven/com.google.code.findbugs/jsr305/pom.properties'
        exclude 'META-INF/maven/com.google.code.findbugs/jsr305/pom.xml'
        exclude 'jsr305_annotations/Jsr305_annotations.gwt.xml'
        // mapsforge
        exclude 'META-INF/maven/org.mapsforge/mapsforge-map-reader/pom.properties'
        exclude 'META-INF/maven/org.mapsforge/mapsforge-map-reader/pom.xml'
        exclude 'META-INF/maven/org.mapsforge/mapsforge-map/pom.properties'
        exclude 'META-INF/maven/org.mapsforge/mapsforge-map/pom.xml'
        exclude 'COPYING.LESSER.v3'
        exclude 'COPYING.v3'
        // Play Services
        exclude 'build-data.properties'
        // rxjava
        exclude 'META-INF/rxandroid.properties'
        exclude 'META-INF/rxjava.properties'
    }

    flavorDimensions "javaCompilerTime" // all flavours must be assigned a dimension
    productFlavors {
        // make sure to not have any flavour lexicographically smaller than "basic". Android Studio takes the first alphabetical flavor in new installations.
        basic {
            dimension "javaCompilerTime"
            buildConfigField "String", "SPECIAL_BUILD", '""'
        }

        nojit {
            dimension "javaCompilerTime"
            buildConfigField "String", "SPECIAL_BUILD", '"Disabled JIT"'
        }
    }

    // remove the "-basic" flavour name from the generated APK, have the flavor remain only for special builds
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = outputFileName.replace('-basic-', '-')
        }
    }

    // special version code for nightly and rc builds
    applicationVariants.all { variant ->
        if (variant.buildType.name == 'nightly') {
            variant.outputs.all {
                setVersionCodeOverride(versionCodeFromDate(10000000))
            }
        }
        if (variant.buildType.name == 'rc') {
            variant.outputs.all {
                setVersionCodeOverride(versionCodeFromDate(-1))
            }
        }
        if (variant.buildType.name == 'legacy') {
            def legacyName = System.getenv('LEGACY_VERSION_NAME')
            def legacyVersion = System.getenv('LEGACY_VERSION_CODE') as Integer
            if (legacyName != null && legacyVersion != null) {
                variant.outputs.all {
                    setVersionNameOverride(legacyName)
                    setVersionCodeOverride(legacyVersion)
                }
            }
        }
        // debug and release builds have offset zero, no special handling here
    }
}

dependencies {
    // AndroidAnnotations, https://github.com/excilys/androidannotations/wiki/building-project-gradle
    def androidAnnotationsVersion = '4.4.0'
    implementation 'com.android.support:support-v4:23.4.0'
    implementation 'com.android.support:support-vector-drawable:23.4.0'
    annotationProcessor "org.androidannotations:androidannotations:$androidAnnotationsVersion"
    implementation "org.androidannotations:androidannotations-api:$androidAnnotationsVersion"

    // Apache Commons
    implementation 'org.apache.commons:commons-collections4:4.1'
    implementation 'org.apache.commons:commons-compress:1.14'
    implementation 'commons-io:commons-io:2.5'
    implementation 'org.apache.commons:commons-lang3:3.5'

    // AssertJ for testing, needed both for local unit tests and Android instrumentation tests
    def assertJVersion = '2.9.0'
    testImplementation "org.assertj:assertj-core:$assertJVersion"
    androidTestImplementation "org.assertj:assertj-core:$assertJVersion"

    // ButterKnife view injection, https://github.com/JakeWharton/butterknife
    def butterKnifeVersion = '8.4.0'
    implementation "com.jakewharton:butterknife:$butterKnifeVersion"
    annotationProcessor "com.jakewharton:butterknife-compiler:$butterKnifeVersion"

    // Findbugs
    implementation('com.google.code.findbugs:annotations:3.0.1u2') {
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
        exclude group: 'net.jcip', module: 'jcip-annotations'
    }

    // GeographicLib
    implementation "net.sf.geographiclib:GeographicLib-Java:1.49"

    // Jackson XML processing
    def jacksonVersion = '2.9.5'
    implementation "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"
    implementation "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    implementation "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion"

    // Jsoup HTML parsing
    implementation 'org.jsoup:jsoup:1.11.3'

    // Junit only needed for local unit tests
    testImplementation 'junit:junit:4.12'

    // Leak Canary, memory leak detection
    def leakCanaryVersion = '1.5.4'
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakCanaryVersion"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"
    nightlyImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"
    rcImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"
    legacyImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"
    testImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"

    // Locus Maps integration
    implementation "com.asamm:locus-api:0.2.15"
    implementation "com.asamm:locus-api-android:0.2.15"

    // Mapsforge old version
    implementation files('libs/mapsforge-map-0.3.0-jar-with-dependencies.jar')
    implementation 'com.caverock:androidsvg:1.2.2-beta-1'

    // Mapsforge new version
    def mapsforgeVersion = '0.9.1'
    implementation "org.mapsforge:mapsforge-core:$mapsforgeVersion"
    implementation "org.mapsforge:mapsforge-map:$mapsforgeVersion"
    implementation "org.mapsforge:mapsforge-map-android:$mapsforgeVersion"
    implementation "org.mapsforge:mapsforge-map-reader:$mapsforgeVersion"
    implementation "org.mapsforge:mapsforge-themes:$mapsforgeVersion"
    configurations {
        all*.exclude group: 'net.sf.kxml', module: 'kxml2' // duplicate XmlPullParser class
    }

    // Maps.ME integration
    implementation project(":mapswithme-api")

    // Metadata Extractor, EXIF location extraction from images
    implementation 'com.drewnoakes:metadata-extractor:2.11.0'

    // Okhttp network access
    implementation 'com.squareup.okhttp3:okhttp:3.9.1'

    // Play Services
    def playServicesVersion = '9.4.0'
    implementation "com.google.android.gms:play-services-location:$playServicesVersion"
    implementation "com.google.android.gms:play-services-appinvite:$playServicesVersion"
    // somehow there is a transitive play service dependency which we don't want
    configurations.all*.exclude module: "play-services-measurement"

    // ProcessPhoenix, reliable process restart
    implementation 'com.jakewharton:process-phoenix:2.0.0'

    // RxJava
    implementation "io.reactivex.rxjava2:rxjava:2.1.12"
    implementation "io.reactivex.rxjava2:rxandroid:2.0.2"

    // Support Library. Appcompat
    implementation 'com.android.support:appcompat-v7:20.0.0'

    // Support Library RecyclerView
    implementation 'com.android.support:recyclerview-v7:22.0.0'
    // we don't want to implement decorators on our own
    implementation 'com.yqritc:recyclerview-flexibledivider:1.4.0'

    // Support Annotations. enforce same version for the main app and the test app
    def supportAnnotationsVersion = '24.2.1'
    implementation "com.android.support:support-annotations:$supportAnnotationsVersion"
    androidTestImplementation "com.android.support:support-annotations:$supportAnnotationsVersion"

    // Testing Support Library. Android Studio recommended test runner, see https://developer.android.com/tools/testing-support-library/index.html#setup
    androidTestImplementation 'com.android.support.test:runner:0.5'

    // Undo toast
    implementation 'com.github.jenzz.undobar:library:1.3:api8Release@aar'
    implementation 'com.nineoldandroids:library:2.4.0'

    // ViewPagerIndicator, view pager titles for cache details and similar view pager based activities
    // this is a fork of the original viewpager library which still works with android level 9. we can use 'com.github.JakeWharton:ViewPagerIndicator:2.4.1@aar' when switching to min sdk 11.
    implementation 'com.viewpagerindicator:viewpagerindicator:2.4.3'

    // Zxing barcode reader integration
    implementation 'com.google.zxing:android-integration:3.3.0'

    // GridLayout used by the coordinate calculator
    implementation 'com.android.support:gridlayout-v7:23.0.1'

    // Espresso TODO: disabled because of causing proguard errors en masse (due to including hamcrest and what else as own dependencies)
    // androidTestCompile 'com.jakewharton.espresso:espresso:1.1-r3'
}

/*
 * un-mocking of Android classes that don't depend on the Android device, but are portable Java only, like SparseArray
 */
apply plugin: 'de.mobilej.unmock'

/*
 * Google Services (App Invite)
 */
apply plugin: 'com.google.gms.google-services'

/*
 * verify existence of the necessary keys for compilation, instead of waiting for a compile error
 */

project.afterEvaluate {
    preBuild.dependsOn("verifyCgeoKeys")
}

task verifyCgeoKeys {
    doFirst {
        def keysFile = file("res/values/keys.xml")
        if (!keysFile.exists()) {
            // copy keys from private.properties to keys.xml. used by the CI server at least
            def propertiesFile = rootProject.file("private.properties")
            if (propertiesFile.exists()) {
                copy {
                    from "templates/keys.xml"
                    into("res/values")
                    def properties = new Properties()
                    propertiesFile.withInputStream {
                        properties.load(it);
                    }
                    filter(ReplaceTokens, tokens: properties)
                    filter { it.replaceAll("@.+?@", "") }
                }
            }
        }
        if (!keysFile.exists()) {
            throw new InvalidUserDataException("You must provide keys in main/res/values/keys.xml for cgeo to compile successfully. You can copy from main/templates/keys.xml and just add the necessary values.")
        }
    }
}

configure(verifyCgeoKeys) {
    group = 'verification'
    description = 'Checks for the existence of keys.xml to successfully compile cgeo.'
}

/*
 * version number from the current date, plus an offset defined by the build type (to define which versions overwrite each other)
 */

static def versionCodeFromDate(offset) {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd')
    return Integer.valueOf(formattedDate) + offset
}

/*
 * version name based on current date
 */

static def versionNameFromDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy.MM.dd')
    return formattedDate
}

class GitCommit {
    static String commitId
}

/*
 * get the most recent git commit ID
 */

def gitCommitId() {
    // TODO: someone with proper groovy knowledge should make this a method at the above class
    if (GitCommit.commitId == null) {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', 'HEAD'
            standardOutput = stdout
        }
        GitCommit.commitId = stdout.toString().trim()
    }
    return GitCommit.commitId
}

/*
 * check whether this is a local build or a CI server build
 */

static def isContinuousIntegrationServer() {
    return System.getenv('BUILD_NUMBER') != null
}

/*
 * have a run task for our builds to launch the app directly from gradle
 */
android.applicationVariants.all { variant ->
    if (variant.install) {
        tasks.create(name: "run${variant.name.capitalize()}", dependsOn: variant.install) {
            group 'cgeo'
            description "Installs the ${variant.description} and runs the main activity. Depends on 'adb' being on the PATH."

            doFirst {
                def classpath = variant.applicationId
                if (variant.buildType.applicationIdSuffix) {
                    classpath -= "${variant.buildType.applicationIdSuffix}"
                }
                def launchClass = "${variant.applicationId}/${classpath}.MainActivity"
                try {
                    project.exec {
                        executable = project.android.getAdbExe().toString()
                        args = ['shell', 'am', 'start', '-n', launchClass]
                    }
                }
                catch (RuntimeException e) {
                    throw new IllegalStateException("Cannot execute 'adb'. Please add %ANDROID_HOME%\\platform-tools to the PATH environment variable and restart your IDE", e)
                }
            }
        }

    }
}

// run device and non device tests together with one task. also fixes the bug that gradle optimizes tests away in repeated runs
tasks.create(name: "testDebug", dependsOn: ["testBasicDebugUnitTest", "connectedBasicDebugAndroidTest"]) {
    group 'cgeo'
    description "Tests the debug build both with device-dependent and device-independent tests."
}

/*
 * signing of release APK, use a properties file like in templates/private.properties
 */

// dynamically load the signing values from private.properties
File privatePropertiesFile = rootProject.file('private.properties')
if (privatePropertiesFile.exists()) {
    Properties properties = new Properties()
    properties.load(new FileInputStream(privatePropertiesFile))
    android.signingConfigs {
        release {
            storeFile file(properties.getProperty('key.store'))
            storePassword properties.getProperty('key.store.password')
            keyAlias properties.getProperty('key.alias')
            keyPassword properties.getProperty('key.alias.password')
        }
    }
    android.buildTypes.release.signingConfig android.signingConfigs.release
}

// check existence of private properties, show an error message
task verifyPrivateProperties {
    doLast {
        if (!rootProject.file('private.properties').exists()) {
            throw new InvalidUserDataException("For signing the release build you must provide a file private.properties in the root directory. Copy templates/private.properties and change the values.")
        }
    }
}

// copy preferences containing user and password to the device
task copyDefaultPreferencesToAndroid(dependsOn: 'installBasicDebug') {
    doFirst {
        def preferences = file('cgeo.geocaching_preferences.xml')
        if (preferences.exists()) {
            try {
                project.exec {
                    executable = project.android.getAdbExe().toString()
                    args = ['push', 'cgeo.geocaching_preferences.xml', '/data/local/tmp/cgeo.geocaching_preferences.xml']
                }
                project.exec {
                    executable = project.android.getAdbExe().toString()
                    args = ['shell', 'run-as', 'cgeo.geocaching', 'mkdir', '/data/data/cgeo.geocaching/shared_prefs/']
                }
                project.exec {
                    executable = project.android.getAdbExe().toString()
                    args = ['shell', 'run-as', 'cgeo.geocaching', 'cp', '/data/local/tmp/cgeo.geocaching_preferences.xml', '/data/data/cgeo.geocaching/shared_prefs/cgeo.geocaching_preferences.xml']
                }
                project.exec {
                    executable = project.android.getAdbExe().toString()
                    args = ['shell', 'run-as', 'cgeo.geocaching', 'ls', '-l', '/data/data/cgeo.geocaching/shared_prefs/']
                }
                project.exec {
                    executable = project.android.getAdbExe().toString()
                    args = ['shell', 'getprop', 'ro.build.version.release']
                }
            }
            // we might not actually have permission to copy the preferences on actual devices, let's continue running the app then
            catch (RuntimeException e) {
                print(e.message)
            }
        }
    }
}

tasks.whenTaskAdded { theTask ->
    // only verify the existence of private.properties, when the file is really needed
    if (theTask.name == "packageRelease") {
        theTask.dependsOn "verifyPrivateProperties"
    }
    // copy default preferences before starting the app
    if (theTask.name == "runBasicDebug" || theTask.name == "connectedBasicDebugAndroidTest") {
        theTask.dependsOn "copyDefaultPreferencesToAndroid"
    }
}

def downloadFromMaven(mavenFilePath, localFilePath) {
    def localFile = new File(localFilePath)
    if (!localFile.exists()) {
        try {
            new URL("https://search.maven.org/remotecontent?filepath=${mavenFilePath}").withInputStream { i ->
                localFile.withOutputStream {
                    it << i
                }
            }
        }
        catch (FileNotFoundException e) {
            println(e.message)
        }
    }
}

def unzipAAR(aarFileName) {
    def dir = new File(".\\libs")
    def aarFile = new File(dir, aarFileName)
    ant.unzip(src: aarFile, dest: dir, overwrite: "true") {
        patternset() {
            include(name: 'classes.jar')
        }

    }
    def libName = aarFileName.substring(0, aarFileName.length() - 3) + "jar"
    def extractedFile = new File(".\\main\\libs", 'classes.jar')
    def renamedFile = new File(".\\main\\libs", libName)
    extractedFile.renameTo(renamedFile)
    new File(".\\main\\libs", aarFileName).delete()
}

task downloadLibs {
    group "cgeo"
    description "Downloads the dependency JARs for use with Eclipse"
    doFirst {
        configurations.implementation.resolvedConfiguration.resolvedArtifacts.each { ResolvedArtifact artifact ->
            if (artifact.extension == 'jar' || artifact.extension == 'aar') {
                project.copy {
                    from artifact.file
                    into "libs"
                }
            }
            if (artifact.extension == 'aar') {
                unzipAAR(artifact.file.name)
            }
        }

        // download javadoc
        new File(".\\main\\libs\\src").mkdirs()
        configurations.implementation.dependencies.each { Dependency dependency ->
            try {
                def vendor = dependency.group.replace(".", "/")
                def version = dependency.version
                def name = dependency.name
                downloadFromMaven("${vendor}/${name}/${version}/${name}-${version}-javadoc.jar", ".\\main\\libs\\src\\${name}-${version}-javadoc.jar")
                downloadFromMaven("${vendor}/${name}/${version}/${name}-${version}-sources.jar", ".\\main\\libs\\src\\${name}-${version}-sources.jar")
                def propFile = new File(".\\main\\libs\\${name}-${version}.jar.properties")
                if (!propFile.exists()) {
                    propFile.write("src=src/${name}-${version}-sources.jar\ndoc=src/${name}-${version}-javadoc.jar\n")
                }
            }
            catch (RuntimeException e) {
                // ???
                println(e.message)
            }
        }

        // remove unwanted artifacts
        delete fileTree('libs') {
            include '**/library-*' // transitive dependency?
            include '**/xmpcore*' // transitive dependency?
            include '**/*androidannotations-api-4*'
            // Eclipse can only deal with AndroidAnnotations 3.x
            // Play Services are real Eclipse projects
            include '**/*play-services*'
            exclude '**/play-services-appinvite*' // except this one

            // more real Eclipse projects
            include '**/*mapswithme*'
            include '**/viewpagerindicator*'

            // Support libraries as Eclipse projects because they contain resources
            include '**/recyclerview-v7*'
            include '**/appcompat-v7*'
            include '**/support-v4*'
        }
    }
}

apply plugin: 'checkstyle'

check.dependsOn 'checkstyle'

task checkstyle(type: Checkstyle) {
    configFile file("${project.rootDir}/checkstyle.xml")
    source 'src'
    include '**/*.java'

    classpath = files()
}

/*
 * Ribbonizer, adds ribbons to launcher icon of debug builds
 * https://github.com/gfx/gradle-android-ribbonizer-plugin
 */
apply plugin: 'com.github.gfx.ribbonizer'

ribbonizer {
    // ribbonize also the about page logo, not only the application icon
    iconNames "@drawable/cgeo_logo"

    // use yellowish ribbon instead of default green
    builder { variant, iconFile ->
        return yellowRibbonFilter(variant, iconFile)
    }
}
