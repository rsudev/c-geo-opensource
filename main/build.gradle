import org.apache.tools.ant.filters.ReplaceTokens

/*
 * Run "gradlew" or "gradlew cgeoHelp" in the parent directory for a help of how to use this build file.
 */


/* 
 * Android plugin, http://developer.android.com/tools/building/plugin-for-gradle.html
 */
apply plugin: 'com.android.application'

android {
    compileSdkVersion "Google Inc.:Google APIs:22"
    buildToolsVersion project.buildToolsVersion

    compileOptions {
    	// use the diamond operator and some other goodies in Android
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    defaultConfig {
        // TODO fill this section and remove the values from AndroidManifest only after the full switch to gradle
        // As these values override the manifest, we might otherwise use different values in gradle and non-gradle builds.
        minSdkVersion 9
        targetSdkVersion 21
        versionName versionNameFromDate()
        versionCode versionCodeFromDate(0)

        // NOTE: must match the package in the test directory and must be different from the app package
        testApplicationId "cgeo.geocaching.test"

        //testHandlingProfiling true
        testFunctionalTest true

        // set the default test runner to be used by IDE and command line
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        // by convention, the folder name "main" is used for the APK file name. we want cgeo instead
        archivesBaseName = "cgeo"

        // this is necessary to move .google_measurement_service into a app-specific namespace (see https://github.com/kotmyrevich/analytics-issues/issues/784)
        applicationId = "cgeo.geocaching"
    }

    // signing is handled via private.properties
    signingConfigs {
        release
    }

    buildTypes {
        debug {
            // debug build name contains git commit for better reproduction of bugs
            versionNameSuffix "-" + gitCommitId().substring(0, 7) + " developer build"

            // additional proguard rules just for the test code
			testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt', '../tests/proguard-project.txt'
        }
        nightly {
            def nightlyName = System.getenv('NB') // NB, NB1, ...
            versionNameSuffix "-$nightlyName-" + gitCommitId().substring(0, 7)
            signingConfig signingConfigs.release
        }
        rc {
            def rcName = System.getenv('RC') // RC, RC1, RC2 ...
            versionNameSuffix "-$rcName"
            signingConfig signingConfigs.release
        }
        release {
            signingConfig signingConfigs.release
        }
    }
    
    buildTypes.all { buildType ->
        // enable proguard and remove unused code
        buildType.minifyEnabled true

        // remove unused resources in addition to unused code
        shrinkResources true

		// proguard rules
        buildType.proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
    }

    testBuildType "debug" //the default BuildType

    sourceSets {
    	// application sources in source set "main"
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src', 'thirdparty', '../common/src'] // no need for annotation generated sources
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
        // local unit tests, which can be executed without a device
        test {
            setRoot("../tests")
            manifest.srcFile '../tests/AndroidManifest.xml'
            java {
                srcDirs = ['../tests/src', 'src']
            }
            resources.srcDirs = ['../tests/src']
            res.srcDirs = ['../tests/res']
        }
        // device/emulator based instrumentation tests in source set "androidTest"
        androidTest{
            // map tests to the Eclipse style test project instead of the default app/src/androidTest/java
            setRoot("../tests")
            manifest.srcFile '../tests/AndroidManifest.xml'
            java {
                srcDirs = ['../tests/src-android', 'src']

                // TODO: espresso causes some dependency conflicts, therefore disable espresso tests temporarily
                exclude '**/*EspressoTest.java'
                exclude '**/*LogTrackableActivityTest.java'
                exclude '**/*Waypoint*Test.java'
            }
            resources.srcDirs = ['../tests/src']
            res.srcDirs = ['../tests/res']
        }
        // TODO: the package cgeo.geocaching.test.mock is currently duplicated in both "src" and "src-android". if a shared source folder is used instead, then we get java.lang.VerificationExceptions, because the 2 unit test frameworks modify the classes in different ways
    }

    testOptions {
        resultsDir = "$project.buildDir/build/test-results"
    }

    lintOptions {
    	// generally we accept lint errors when building 
        abortOnError false
        
    	// abort release builds in case of FATAL errors
        checkReleaseBuilds true

        // recommended by ButterKnife, http://jakewharton.github.io/butterknife/
        disable 'InvalidPackage'
    }

    packagingOptions {
        // license files of libs are not needed in our APK
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/dependencies'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/notice'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/license'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'COPYING'
        exclude 'COPYING.LESSER'
        exclude '.readme'
        // findbugs
        exclude 'META-INF/maven/com.google.code.findbugs/jsr305/pom.properties'
        exclude 'META-INF/maven/com.google.code.findbugs/jsr305/pom.xml'
    }

    productFlavors {
        // make sure to not have any flavour lexicographically smaller than "basic". Android Studio takes the first alphabetical flavor in new installations.
        basic {
            buildConfigField "String", "SPECIAL_BUILD", '""'
        }

        nojit {
            buildConfigField "String", "SPECIAL_BUILD", '"Disabled JIT"'
        }
    }

    // remove the "-basic" flavour name from the generated APK, have the flavor remain only for special builds
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            output.outputFile = new File(
                    output.outputFile.parent,
                    output.outputFile.name.replace('-basic-', '-'))
        }
    }

    // special version code for nightly and rc builds
    applicationVariants.all { variant ->
        if (variant.buildType.name.equals('nightly')) {
            variant.mergedFlavor.versionCode = versionCodeFromDate(10000000)
        }
        if (variant.buildType.name.equals('rc')) {
            variant.mergedFlavor.versionCode = versionCodeFromDate(-1)
        }
        // debug and release builds have offset zero, no special handling here
    }
}

/*
 * IDEA
 */
apply plugin: 'idea'

idea.module.testSourceDirs += file('tests/src-android')

/*
 * AndroidAnnotations, https://github.com/excilys/androidannotations/wiki/building-project-gradle
 */
apply plugin: 'android-apt'

apt {
    arguments {
        // AndroidAnnotations needs to know the manifest of the current flavor
        androidManifestFile variant.outputs[0]?.processResources?.manifestFile

        // suppress verbose output of the AndroidAnnotations processor during build
        logLevel 'error'
    }
}

dependencies {
/*
 * cgeo library dependencies. add gradle plugin related dependencies further down below
 */
    // Maps.ME integration
    compile project(":mapswithme-api")

    // Showcase view
    // TODO replace by repository dependency. however, there is a conflict in min sdk, which needs to be solved then
    compile project(":showcaseview")

    compile 'com.squareup.okhttp3:okhttp:3.2.0'
    compile files('libs/locus-api-1.37.jar')
    compile files('libs/locus-api-android-1.37.41.jar')
    compile files('libs/mapsforge-map-0.3.0-jar-with-dependencies.jar')
    compile files('libs/androidsvg-1.2.2-beta-1.jar')
    compile files('libs/mapsforge-core-0.6.0.jar')
    compile files('libs/mapsforge-map-0.6.0.jar')
    compile files('libs/mapsforge-map-android-0.6.0.jar')
    compile files('libs/mapsforge-map-reader-0.6.0.jar')

    compile 'com.android.support:appcompat-v7:20.0.0'

    // Play Services: location
    compile 'com.google.android.gms:play-services-location:8.4.0'

    // Play Services: App Invite
    compile 'com.google.android.gms:play-services-appinvite:8.4.0'

    // no idea why this dependency is needed. it is implicitly used, and defaults to a wrong version 8.3, so we make it explicit
    compile 'com.google.android.gms:play-services-measurement:8.4.0'

    // Apache Commons
    compile 'org.apache.commons:commons-collections4:4.1'
    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'org.apache.commons:commons-compress:1.10'
    compile 'commons-io:commons-io:2.4'
    compile 'com.google.code.findbugs:annotations:3.0.1u2'
    androidTestCompile 'com.google.code.findbugs:annotations:3.0.1u2'

    // Reactive extensions
    compile 'io.reactivex:rxjava:1.1.2'
    compile 'io.reactivex:rxandroid:0.25.0'

    // Jackson XML processing
    compile 'com.fasterxml.jackson.core:jackson-core:2.7.3'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.7.3'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.7.3'

    // Zxing barcode reader integration
    compile 'com.google.zxing:android-integration:3.2.1'

    // Null annotations
    compile 'org.eclipse.jdt:org.eclipse.jdt.annotation:1.1.0'

    // Undo toast
    compile 'com.github.jenzz.undobar:library:1.3:api8Release@aar'
    compile 'com.nineoldandroids:library:2.4.0'

    // Android Studio recommended test runner, see https://developer.android.com/tools/testing-support-library/index.html#setup
    androidTestCompile 'com.android.support.test:runner:0.5'

    // enforce same version of the support annotations for the main app and the test app
    compile 'com.android.support:support-annotations:23.2.0'
    androidTestCompile 'com.android.support:support-annotations:23.2.0'

    // Junit only needed for local unit tests
    testCompile 'junit:junit:4.12'

    // AssertJ for testing, needed both for local unit tests and Android instrumentation tests
    testCompile 'org.assertj:assertj-core:1.7.1'
    androidTestCompile 'org.assertj:assertj-core:1.7.1'

    // Espresso TODO: disabled because of causing proguard errors en masse (due to including hamcrest and what else as own dependencies)
//    androidTestCompile 'com.jakewharton.espresso:espresso:1.1-r3'

/*
 * AndroidAnnotations, https://github.com/excilys/androidannotations/wiki/building-project-gradle
 */
    apt 'org.androidannotations:androidannotations:3.3.2'
    compile 'org.androidannotations:androidannotations-api:3.3.2'

/*
 * ButterKnife view injection, https://github.com/JakeWharton/butterknife
 */
    compile 'com.jakewharton:butterknife:7.0.1'

/*
 * Jsoup HTML parsing
 */
    compile 'org.jsoup:jsoup:1.8.3'

    compile 'com.drewnoakes:metadata-extractor:2.8.1'

}

/*
 * un-mocking of Android classes that don't depend on the Android device, but are portable Java only, like SparseArray
 */
apply plugin: 'de.mobilej.unmock'


/*
 * Google Services (App Invite)
 */
apply plugin: 'com.google.gms.google-services'


/*
 * verify existence of the necessary keys for compilation, instead of waiting for a compile error
 */

project.afterEvaluate{
    preBuild.dependsOn("verifyCgeoKeys")
}

task verifyCgeoKeys {
    doFirst {
        def keysFile = file("res/values/keys.xml")
        if (!keysFile.exists()) {
            // copy keys from private.properties to keys.xml. used by the CI server at least
            def propertiesFile = rootProject.file("private.properties")
            if (propertiesFile.exists()) {
                copy {
                    from "templates/keys.xml"
                    into ("res/values")
                    def properties = new Properties()
                    propertiesFile.withInputStream {
                        properties.load(it);
                    }
                    filter(ReplaceTokens, tokens: properties)
                }
            }
        }
        if (!keysFile.exists()) {
            throw new InvalidUserDataException("You must provide keys in main/res/values/keys.xml for cgeo to compile successfully. You can copy from main/templates/keys.xml and just add the necessary values.")
        }
    }
}

configure (verifyCgeoKeys) {
    group = 'verification'
    description = 'Checks for the existence of keys.xml to successfully compile cgeo.'
}


/*
 * version number from the current date, plus an offset defined by the build type (to define which versions overwrite each other)
 */
def versionCodeFromDate(offset) {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd')
    return Integer.valueOf(formattedDate) + offset
}

/*
 * version name based on current date
 */ 
def versionNameFromDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy.MM.dd')
    return formattedDate
}

/*
 * get the most recent git commit ID
 */
def gitCommitId() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

/*
 * have a run task for our builds to launch the app directly from gradle
 */
android.applicationVariants.all { variant ->
    if (variant.install) {
        tasks.create(name: "run${variant.name.capitalize()}", dependsOn: variant.install) {
            group 'cgeo'
            description "Installs the ${variant.description} and runs the main launcher activity. Depends on 'adb' being on the PATH."

            doFirst {
                def classpath = variant.applicationId
                if (variant.buildType.applicationIdSuffix) {
                    classpath -= "${variant.buildType.applicationIdSuffix}"
                }
                def launchClass = "${variant.applicationId}/${classpath}.MainActivity"
                try {
                    project.exec {
                        executable = project.android.getAdbExe().toString()
                        args = ['shell', 'am', 'start', '-n', launchClass]
                    }
                }
                catch (RuntimeException e) {
                    throw new IllegalStateException("Cannot execute 'adb'. Please add %ANDROID_HOME%\\platform-tools to the PATH environment variable and restart your IDE", e)
                }
            }
        }

    }
}

// run device and non device tests together with one task. also fixes the bug that gradle optimizes tests away in repeated runs
tasks.create(name: "testDebug", dependsOn: [ "testBasicDebugUnitTest", "connectedBasicDebugAndroidTest" ]) {
    group 'cgeo'
    description "Tests the debug build both with device-dependent and device-independent tests."
}

/*
 * signing of release APK, use a properties file like in templates/private.properties
 */

// dynamically load the signing values from private.properties
File privatePropertiesFile = rootProject.file('private.properties')
if (privatePropertiesFile.exists()) {
    Properties properties = new Properties()
    properties.load(new FileInputStream(privatePropertiesFile))
    android.signingConfigs {
        release {
            storeFile file(properties.getProperty('key.store'))
            storePassword properties.getProperty('key.store.password')
            keyAlias properties.getProperty('key.alias')
            keyPassword properties.getProperty('key.alias.password')
        }
    }
    android.buildTypes.release.signingConfig android.signingConfigs.release
}

// check existence of private properties, show an error message
task verifyPrivateProperties << {
    if (!rootProject.file('private.properties').exists()) {
        throw new InvalidUserDataException("For signing the release build you must provide a file private.properties in the root directory. Copy templates/private.properties and change the values.")
    }
}

// copy preferences containing user and password to the device
task copyDefaultPreferencesToAndroid(dependsOn: 'installBasicDebug') {
    doFirst {
        def preferences = file('cgeo.geocaching_preferences.xml')
        if (preferences.exists()) {
            try {
                project.exec {
                    executable = project.android.getAdbExe().toString()
                    args = ['push', 'cgeo.geocaching_preferences.xml', '/data/data/cgeo.geocaching/shared_prefs/cgeo.geocaching_preferences.xml']
                }
            }
            // we might not actually have permission to copy the preferences on actual devices, let's continue running the app then
            catch (RuntimeException e) {
                print(e.message)
            }
        }
    }
}

tasks.whenTaskAdded { theTask ->
    // only verify the existence of private.properties, when the file is really needed
    if (theTask.name.equals("packageRelease")) {
        theTask.dependsOn "verifyPrivateProperties"
    }
    // copy default preferences before starting the app
    if (theTask.name.equals("runBasicDebug") || theTask.name.equals("connectedBasicDebugAndroidTest")) {
        theTask.dependsOn "copyDefaultPreferencesToAndroid"
    }
}

apply plugin: 'de.undercouch.download'

import de.undercouch.gradle.tasks.download.Download

def mavenLib(vendor, name, version) {
    "https://search.maven.org/remotecontent?filepath=${vendor}/${name}/${version}/${name}-${version}.jar"
}

task downloadLibs(type:Download) {
    group "cgeo"
    description "Downloads the dependency JARs for use with Eclipse"
    src([
            mavenLib('io/reactivex', 'rxjava', '1.1.2'),
            mavenLib('io/reactivex', 'rxandroid', '0.25.0'),
            mavenLib('com/fasterxml/jackson/core','jackson-core','2.7.3'),
            mavenLib('com/fasterxml/jackson/core','jackson-databind','2.7.3'),
            mavenLib('com/fasterxml/jackson/core','jackson-annotations','2.7.3'),
            mavenLib('org/apache/commons','commons-collections4','4.1'),
            mavenLib('org/apache/commons','commons-lang3','3.4'),
            mavenLib('commons-io','commons-io','2.4'),
            mavenLib('com/jakewharton','butterknife','7.0.1'),
            mavenLib('org/jsoup','jsoup','1.8.3'),
			mavenLib('com/drewnoakes','metadata-extractor','2.8.1'),
            mavenLib('com/squareup/okhttp3', 'okhttp', '3.2.0'),
            mavenLib('com/squareup/okio','okio','1.6.0') // for whatever reason Eclipse wants to resolve one reference to okio.ByteString
    ])
    dest 'libs'
}
